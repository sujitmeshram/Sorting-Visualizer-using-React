{"version":3,"sources":["SortingAlgorithms/MergeSort.js","SortingAlgorithms/QuickSort.js","SortingAlgorithms/SelectionSort.js","SortingAlgorithms/BubbleSort.js","SortingVisualizer/SortingVisualizer.js","SortingAlgorithms/InsertionSort.js","App.js","index.js"],"names":["getMergeSortAnimations","array","animations","auxillaryArray","slice","mergeSort","startIndex","endIndex","middleIndex","Math","floor","sortArray","i","j","push","merge","length","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","getQuickSortAnimations","quickSort","pivotIndex","min","max","random","swap","lessTailIndex","partitionArray","firstIndex","secondIndex","temp","getSelectionSortAnimations","N","minIndex","selectionSort","getBubbleSortAnimations","iters","swapped","bubbleSort","window","innerWidth","WINDOW_HEIGHT","innerHeight","ENABLED_BUTTON","SortingVisualizer","props","state","this","resetArray","setState","restoreStoreButtons","document","getElementById","disabled","buttonStyle","style","title","cursor","background","disableSortButtons","isColorChange","arrayBars","getElementsByClassName","barOneIndex","barTwoIndex","color","barOneStyle","barTwoStyle","setTimeout","backgroundColor","barOneIdx","newHeight","height","RESTORE_TIME","parseInt","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","className","position","right","map","value","idx","top","onClick","id","React","Component","App","ReactDOM","render"],"mappings":"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","file":"static/js/main.16fcbb40.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    mergeSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction mergeSort(auxillaryArray, startIndex, endIndex, animations) {\n    if(startIndex === endIndex)\n        return;\n    const middleIndex = Math.floor((startIndex + endIndex)/2);\n    mergeSort(auxillaryArray, startIndex, middleIndex, animations);\n    mergeSort(auxillaryArray, middleIndex + 1, endIndex, animations);\n    merge(auxillaryArray, startIndex, middleIndex, endIndex, animations);\n}\n\nfunction merge(auxillaryArray, startIndex, middleIndex, endIndex, animations) {\n    let sortArray = [];\n    let i = startIndex;\n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex) {\n        //Comparing value at ith and jth index so push them to change their color\n        animations.push([\"comparision1\", i, j]);\n        //By changing color we imply that we are comparing those two values and then again we should revert back to their original color so push them again\n        animations.push([\"comparision2\", i, j]);\n        if(auxillaryArray[i] <= auxillaryArray[j]) {\n            sortArray.push(auxillaryArray[i++]);\n        }\n        else {\n            sortArray.push(auxillaryArray[j++]);\n        }\n    }\n    while(i <= middleIndex) {\n        animations.push([\"comparision1\", i, i]);\n        animations.push([\"comparision2\", i, i]);\n        sortArray.push(auxillaryArray[i++]);\n    }\n    while(j <= endIndex) {\n        animations.push([\"comparision1\", j, j]);\n        animations.push([\"comparision2\", j, j]);\n        sortArray.push(auxillaryArray[j++]);\n    }\n    for (let i = startIndex; i <= endIndex; i++) {\n        animations.push([\"comparision1\", i, i - startIndex]);\n        animations.push([\"overwrite\", i, sortArray[i - startIndex]]);\n        animations.push([\"comparision2\", i, i - startIndex]);\n        auxillaryArray[i] = sortArray[i - startIndex];\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getQuickSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex;\n    if (startIndex < endIndex) {\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\n    }\n}\n\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\n    let pivotIndex = randomIntFromInterval(startIndex, endIndex);\n    \n    animations.push([\"comparision1\", pivotIndex, endIndex]);\n    animations.push([\"swap\", pivotIndex, auxillaryArray[endIndex]]);\n    animations.push([\"swap\", endIndex, auxillaryArray[pivotIndex]]);\n    animations.push([\"comparision2\", pivotIndex, endIndex]);\n    swap(auxillaryArray, pivotIndex, endIndex);\n\n    let lessTailIndex = startIndex;\n\n    for(let i = startIndex; i < endIndex; ++i) {\n        animations.push([\"comparision1\", i, endIndex]);\n        animations.push([\"comparision2\", i, endIndex]);\n        if(auxillaryArray[i] <= auxillaryArray[endIndex]) {\n            animations.push([\"comparision1\", i, lessTailIndex]);\n            animations.push([\"swap\", i, auxillaryArray[lessTailIndex]]);\n            animations.push([\"swap\", lessTailIndex, auxillaryArray[i]]);\n            animations.push([\"comparision2\", i, lessTailIndex]);\n            swap(auxillaryArray, i, lessTailIndex);\n            lessTailIndex++;\n        }\n    }\n    animations.push([\"comparision1\", lessTailIndex, endIndex]);\n    animations.push([\"swap\", endIndex, auxillaryArray[lessTailIndex]]);\n    animations.push([\"swap\", lessTailIndex, auxillaryArray[endIndex]]);\n    animations.push([\"comparision2\", lessTailIndex, endIndex]);\n    \n    swap(auxillaryArray, lessTailIndex, endIndex);\n    return lessTailIndex;\n\n    // let pivot = auxillaryArray[endIndex];\n    // let pivotIndex = startIndex;\n    // for (let i = startIndex; i <= endIndex - 1; i++) {\n    //     animations.push([i, endIndex]);\n    //     animations.push([i, endIndex]);\n    //     if (auxillaryArray[i] <= pivot) {\n    //         //Swap these two heights\n    //         animations.push([i, auxillaryArray[pivotIndex]]);\n    //         animations.push([pivotIndex, auxillaryArray[i]]);\n    //         swap(auxillaryArray, i , pivotIndex);\n    //         pivotIndex++;\n    //     }\n    //     else {\n    //         animations.push([-1, -1]);\n    //         animations.push([-1, -1]);\n    //     }\n    //     animations.push([-1, -1]);\n    //     animations.push([-1, -1]);\n    // }\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // animations.push([-1, -1]);\n    // //Swap these two heights\n    // animations.push([pivotIndex, auxillaryArray[endIndex]]);\n    // animations.push([endIndex, auxillaryArray[pivotIndex]]);\n    // swap(auxillaryArray, pivotIndex, endIndex);\n    // return pivotIndex;\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}\n\nfunction randomIntFromInterval(min, max) {\n    // min and max included\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}","export function getSelectionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","export function getBubbleSortAnimations(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  bubbleSort(auxillaryArray, animations);\n  const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n  console.log(\n    \"sort works correctly? \",\n    arraysAreEqual(javaScriptSortedArray, auxillaryArray)\n  );\n  array = auxillaryArray;\n  return [animations, array];\n}\n\nfunction bubbleSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n  let iters = N - 1;\n  while (iters > 0) {\n    let swapped = false;\n    for (let i = 0; i < iters; ++i) {\n      animations.push([\"comparision1\", i, i + 1]);\n      animations.push([\"comparision2\", i, i + 1]);\n      if (auxillaryArray[i] > auxillaryArray[i + 1]) {\n        swapped = true;\n        animations.push([\"swap\", i, auxillaryArray[i + 1]]);\n        animations.push([\"swap\", i + 1, auxillaryArray[i]]);\n        swap(auxillaryArray, i, i + 1);\n      }\n    }\n    if (swapped === false) break;\n    iters--;\n  }\n}\n\n//for swapping\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n","import React from \"react\";\nimport \"./SortingVisualizer.css\";\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/MergeSort\";\nimport { getQuickSortAnimations } from \"../SortingAlgorithms/QuickSort\";\nimport { getInsertionSortAnimations } from \"../SortingAlgorithms/InsertionSort\";\nimport { getSelectionSortAnimations } from \"../SortingAlgorithms/SelectionSort\";\nimport { getBubbleSortAnimations } from \"../SortingAlgorithms/BubbleSort\";\n//Changing width,height accordingly with the browser\nlet WINDOW_WIDTH = window.innerWidth;\nlet WINDOW_HEIGHT = window.innerHeight;\nlet NUMBER_OF_ARRAY_BARS = 58;\n\nconst PRIMARY_COLOR = \"turquoise\"; //Normal color of bars\nconst SECONDARY_COLOR = \"red\"; //Color of bars when they are being compared\nconst ANIMATION_SPEED_MS = 5; //Animation Speed (how fast color changes, how fast height gets overwritten)\n\n//Tooltips for buttons\nconst DISABLED_BUTTON = \"Currently Disabled\";\nconst ENABLED_BUTTON = {\n  nlogn: \"O(NlogN) Time Complexity\",\n  nSquare: \"O(N^2) Time Complexity\",\n};\n\nclass SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [],\n    };\n  }\n  componentDidMount() {\n    this.resetArray();\n  }\n  //Generates new random array\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      // array.push(200 + 10 * i); //pushing sorted increasing array\n      // array.push(500 - 5 * i); //pushing sorted decreasing array\n      array.push(randomIntFromInterval(25, WINDOW_HEIGHT - 30)); //random array\n    }\n    this.setState({ array: array });\n    this.restoreStoreButtons();\n  }\n  disableSortButtons() {\n    document.getElementById(\"mergeSort\").disabled = true;\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\n    document.getElementById(\"mergeSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n\n    document.getElementById(\"quickSort\").disabled = true;\n    buttonStyle = document.getElementById(\"quickSort\").style;\n    document.getElementById(\"quickSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n\n    document.getElementById(\"insertionSort\").disabled = true;\n    buttonStyle = document.getElementById(\"insertionSort\").style;\n    document.getElementById(\"insertionSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n\n    document.getElementById(\"selectionSort\").disabled = true;\n    buttonStyle = document.getElementById(\"selectionSort\").style;\n    document.getElementById(\"selectionSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n\n    document.getElementById(\"bubbleSort\").disabled = true;\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\n    document.getElementById(\"bubbleSort\").title = DISABLED_BUTTON;\n    buttonStyle.cursor = \"default\";\n    buttonStyle.background = \"#000000\";\n  }\n  restoreStoreButtons() {\n    document.getElementById(\"mergeSort\").disabled = false;\n    let buttonStyle = document.getElementById(\"mergeSort\").style;\n    document.getElementById(\"mergeSort\").title = ENABLED_BUTTON.nlogn;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n\n    document.getElementById(\"quickSort\").disabled = false;\n    buttonStyle = document.getElementById(\"quickSort\").style;\n    document.getElementById(\"quickSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n\n    document.getElementById(\"bubbleSort\").disabled = false;\n    buttonStyle = document.getElementById(\"bubbleSort\").style;\n    document.getElementById(\"bubbleSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n\n    document.getElementById(\"selectionSort\").disabled = false;\n    buttonStyle = document.getElementById(\"selectionSort\").style;\n    document.getElementById(\"selectionSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n\n    document.getElementById(\"insertionSort\").disabled = false;\n    buttonStyle = document.getElementById(\"insertionSort\").style;\n    document.getElementById(\"insertionSort\").title = ENABLED_BUTTON.nSquare;\n    buttonStyle.background = \"#47535E\";\n    buttonStyle.cursor = \"pointer\";\n  }\n  //Sorting Algorithms\n  mergeSort() {\n    this.disableSortButtons();\n    const [animations, sortArray] = getMergeSortAnimations(this.state.array);\n    console.log(animations);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] == \"comparision1\" ||\n        animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const [comparision, barOneIndex, barTwoIndex] = animations[i];\n        const color =\n          animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        //If we don't multiply by the index then every animations[i] wait for exactly ANIMATION_SPEED_MS and immediately change into final state\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [overwrite, barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    // this.setState({array: sortArray})\n    const RESTORE_TIME = parseInt(\n      (ANIMATION_SPEED_MS * animations.length) / 2 + 3000\n    );\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n  quickSort() {\n    this.disableSortButtons();\n    const [animations, sortArray] = getQuickSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] == \"comparision1\" ||\n        animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [comparision, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [swap, barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    // this.setState({array: sortArray})\n    const RESTORE_TIME = parseInt(\n      (ANIMATION_SPEED_MS * animations.length) / 2 + 3000\n    );\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n  bubbleSort() {\n    this.disableSortButtons();\n    const [animations, sortArray] = getBubbleSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] == \"comparision1\" ||\n        animations[i][0] == \"comparision2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] == \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [comparision, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [swap, barIndex, newHeight] = animations[i];\n        if (barIndex === -1) {\n          continue;\n        }\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    // this.setState({array: sortArray})\n    const RESTORE_TIME = parseInt(\n      (ANIMATION_SPEED_MS * animations.length) / 2 + 3000\n    );\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n  insertionSort() {\n    this.disableSortButtons();\n    const [animations, sortArray] = getInsertionSortAnimations(\n      this.state.array\n    );\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparision1\" ||\n        animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    // this.setState({array: sortArray})\n    const RESTORE_TIME = parseInt(\n      (ANIMATION_SPEED_MS * animations.length) / 2 + 3000\n    );\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n  selectionSort() {\n    this.disableSortButtons();\n    const [animations, sortArray] = getSelectionSortAnimations(\n      this.state.array\n    );\n    for (let i = 0; i < animations.length; i++) {\n      const isColorChange =\n        animations[i][0] === \"comparision1\" ||\n        animations[i][0] === \"comparision2\";\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      if (isColorChange === true) {\n        const color =\n          animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\n        const barOneStyle = arrayBars[barOneIndex].style;\n        const barTwoStyle = arrayBars[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [temp, barIndex, newHeight] = animations[i];\n        const barStyle = arrayBars[barIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    // this.setState({array: sortArray})\n    const RESTORE_TIME = parseInt(\n      (ANIMATION_SPEED_MS * animations.length) / 2 + 3000\n    );\n    setTimeout(() => this.restoreStoreButtons(), RESTORE_TIME);\n  }\n\n  render() {\n    const array = this.state.array;\n    const SORT_BUTTONS = 6;\n    const TOTAL_BUTTONS = 1 + SORT_BUTTONS;\n    return (\n      <>\n        <div\n          className=\"array-container\"\n          style={{ position: \"absolute\", right: `20px` }}\n        >\n          {array.map((value, idx) => (\n            <div\n              className=\"array-bar\"\n              key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}\n            ></div>\n          ))}\n        </div>\n        <div className=\"buttons\">\n          <button\n            title=\"Generates a new random array\"\n            style={{\n              position: \"relative\",\n              top: `${(0 * (WINDOW_HEIGHT - 20)) / TOTAL_BUTTONS}px`,\n            }}\n            onClick={() => this.resetArray()}\n          >\n            Generate New Array\n          </button>\n          <button\n            title=\"O(NlogN) Time Complexity\"\n            id=\"mergeSort\"\n            style={{\n              position: \"relative\",\n              top: `${(1 * (WINDOW_HEIGHT - 20)) / TOTAL_BUTTONS}px`,\n            }}\n            onClick={() => this.mergeSort()}\n          >\n            Merge Sort\n          </button>\n          <button\n            title=\"O(N^2) Time Complexity\"\n            id=\"quickSort\"\n            style={{\n              position: \"relative\",\n              top: `${(2 * (WINDOW_HEIGHT - 20)) / TOTAL_BUTTONS}px`,\n            }}\n            onClick={() => this.quickSort()}\n          >\n            Quick Sort\n          </button>\n          <button\n            title=\"O(N^2) Time Complexity\"\n            id=\"bubbleSort\"\n            style={{\n              position: \"relative\",\n              top: `${(3 * (WINDOW_HEIGHT - 20)) / TOTAL_BUTTONS}px`,\n            }}\n            onClick={() => this.bubbleSort()}\n          >\n            Bubble Sort\n          </button>\n          <button\n            title=\"O(N^2) Time Complexity\"\n            id=\"insertionSort\"\n            style={{\n              position: \"relative\",\n              top: `${(4 * (WINDOW_HEIGHT - 20)) / TOTAL_BUTTONS}px`,\n            }}\n            onClick={() => this.insertionSort()}\n          >\n            Insertion Sort\n          </button>\n          <button\n            title=\"O(N^2) Time Complexity\"\n            id=\"selectionSort\"\n            style={{\n              position: \"relative\",\n              top: `${(5 * (WINDOW_HEIGHT - 20)) / TOTAL_BUTTONS}px`,\n            }}\n            onClick={() => this.selectionSort()}\n          >\n            Selection Sort\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nexport default SortingVisualizer;\n","export function getInsertionSortAnimations(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    insertionSort(auxillaryArray, animations);\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\n    array = auxillaryArray;\n    return [animations, array];\n}\n\nfunction insertionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 1; i < N; i++) {\n        let key = auxillaryArray[i];\n        let j = i - 1;\n        animations.push([\"comparision1\", j, i]);\n        animations.push([\"comparision2\", j, i]);\n        while(j >= 0 && auxillaryArray[j] > key) {\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\n            auxillaryArray[j + 1] = auxillaryArray[j];\n            j = j - 1;\n            if(j >= 0) {\n                animations.push([\"comparision1\", j, i]);\n                animations.push([\"comparision2\", j, i]);\n            }     \n        }\n        animations.push([\"overwrite\", j + 1, key]);\n        auxillaryArray[j + 1] = key;\n    }\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer'\nimport './App.css'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <SortingVisualizer />\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n    document.getElementById(\"root\")\n);"],"sourceRoot":""}